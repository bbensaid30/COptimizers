#include <iostream>
#include <string>
#include <fstream>
#include <iterator>
#include <vector>
#include <random>
#include <chrono>
#include <iomanip>

#include <Eigen/Dense>
#include <EigenRand/EigenRand>

#include <omp.h>

#include "init.h"
#include "data.h"
#include "training.h"
#include "Straining.h"
#include "test.h"
#include "Stest.h"
#include "tirage.h"
#include "Stirage.h"

int main()
{
   
  omp_set_num_threads(omp_get_num_procs());
    //omp_set_num_threads(1);
    Eigen::initParallel();

   //Paramètres généraux
    std::string const distribution="Xavier";
    std::vector<double> const supParameters={-10,10};
    int const tirageMin=0;
    int const nbTirages=1;
    std::string const famille_algo="Perso";
    std::string const algo="LC_EGD2";
    double const eps=std::pow(10,-4);
    int const maxEpoch=200000;

    //Paramètres des méthodes LM
    double mu=100, factor=10, RMin=0.25, RMax=0.75, epsDiag=std::pow(10,-16), Rlim=std::pow(10,-4), factorMin=std::pow(10,-8), power=1.0, alphaChap=1.1, alpha=0.75, pas=0.1;
    double tau=1, beta=2.0, gamma=3.0;
    int const b=1, p=3;

    double learning_rate=0.1;
    double clip=1/learning_rate;
    double seuil=0.01;
    double beta1 = 1-0.9;
    double beta2 = 1-0.999;

    //int const nbPoints=404; double percTrain=0.5;
    int const PTrain = 37760, PTest=16183;
    int const batch_size =PTrain;
    std::vector<Eigen::MatrixXd> dataTrain(2);
    std::vector<Eigen::MatrixXd> data(4);
    //dataTrain = square(nbPoints);
    //data = trainTestData(dataTrain,percTrain,true);
    //data = Sonar(PTrain,PTest);
    //data = Boston(PTrain,PTest);
    //data = German(PTrain,PTest);
    //data = California(PTrain,PTest);
    data = Diamonds(PTrain,PTest);

    int const n0=data[0].rows(), nL=data[1].rows();
    int N=0;
    int const L=3;
    std::vector<int> nbNeurons(L+1);
    std::vector<int> globalIndices(2*L);
    std::vector<std::string> activations(L);
    std::vector<Eigen::MatrixXd> weights(L);
    std::vector<Eigen::VectorXd> bias(L);

    //Architecture
    int l;
    nbNeurons[0]=n0;
    for(int l=1; l<L; l++){nbNeurons[l]=30;}
    nbNeurons[L]=nL;
    for(int l=0;l<L-1;l++){activations[l]="GELU";}
    activations[L-1]="linear";
    for(l=0;l<L;l++)
    {
        N+=nbNeurons[l]*nbNeurons[l+1]; globalIndices[2*l]=N; N+=nbNeurons[l+1]; globalIndices[2*l+1]=N;
    }

    std::string const type_perte = "norme2";
    std::vector<std::map<std::string,double>> studies(nbTirages);
    studies = tiragesRegression(data,L,nbNeurons,globalIndices,activations,type_perte,famille_algo,algo,supParameters,distribution,tirageMin,nbTirages,
    eps,maxEpoch,learning_rate,clip,seuil,beta1,beta2,batch_size,mu,factor,RMin,RMax,b,alpha,pas,Rlim,factorMin,power,alphaChap,epsDiag,true);
    std::string folder = "Diamonds";
    std::string fileExtension = "";
    std::string const fileEnd = informationFile(PTrain,PTest,L,nbNeurons,activations,type_perte,algo,supParameters,distribution,tirageMin,nbTirages,learning_rate,
    batch_size,eps,maxEpoch,fileExtension);
    minsRecordRegression(studies,folder,fileEnd,eps);

    std::cout << studies[0]["epoch"] << std::endl;

